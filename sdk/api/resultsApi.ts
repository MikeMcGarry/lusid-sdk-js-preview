/**
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1389
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import localVarRequest = require('request');
import http = require('http');

/* tslint:disable:no-unused-locals */
import { CreateResults } from '../model/createResults';
import { LusidProblemDetails } from '../model/lusidProblemDetails';
import { LusidValidationProblemDetails } from '../model/lusidValidationProblemDetails';
import { Results } from '../model/results';

import { ObjectSerializer, Authentication, VoidAuth } from '../model/models';
import { OAuth } from '../model/models';

let defaultBasePath = 'http://localhost';

// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================

export enum ResultsApiApiKeys {
}

export class ResultsApi {
    protected _basePath = defaultBasePath;
    protected defaultHeaders : any = {};
    protected _useQuerystring : boolean = false;

    protected authentications = {
        'default': <Authentication>new VoidAuth(),
        'oauth2': new OAuth(),
    }

    constructor(basePath?: string);
    constructor(basePathOrUsername: string, password?: string, basePath?: string) {
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        } else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername
            }
        }
    }

    set useQuerystring(value: boolean) {
        this._useQuerystring = value;
    }

    set basePath(basePath: string) {
        this._basePath = basePath;
    }

    get basePath() {
        return this._basePath;
    }

    public setDefaultAuthentication(auth: Authentication) {
        this.authentications.default = auth;
    }

    public setApiKey(key: ResultsApiApiKeys, value: string) {
        (this.authentications as any)[ResultsApiApiKeys[key]].apiKey = value;
    }

    set accessToken(token: string) {
        this.authentications.oauth2.accessToken = token;
    }

    /**
     * Retrieve pre-calculated results that have been stored in LUSID.
     * @summary [EXPERIMENTAL] Retrieve a page of results all keyed by the provided parameters. The result store is not bi-temporal; a single date  addressed the market effectiveAt.
     * @param entityScope The scope of the data or entity being stored
     * @param entityCode The identifier for the data or results entity being stored
     * @param calculationScope The identifying scope for the calculation that produced the result
     * @param calculationCode The identifying calculation name for the results
     * @param effectiveAt The market date for which the data is stored
     */
    public async getResults (entityScope: string, entityCode: string, calculationScope: string, calculationCode: string, effectiveAt: Date, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Results;  }> {
        const localVarPath = this.basePath + '/api/results/{entityScope}/{entityCode}/{calculationScope}/{calculationCode}/{effectiveAt}'
            .replace('{' + 'entityScope' + '}', encodeURIComponent(String(entityScope)))
            .replace('{' + 'entityCode' + '}', encodeURIComponent(String(entityCode)))
            .replace('{' + 'calculationScope' + '}', encodeURIComponent(String(calculationScope)))
            .replace('{' + 'calculationCode' + '}', encodeURIComponent(String(calculationCode)))
            .replace('{' + 'effectiveAt' + '}', encodeURIComponent(String(effectiveAt)));
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        // verify required parameter 'entityScope' is not null or undefined
        if (entityScope === null || entityScope === undefined) {
            throw new Error('Required parameter entityScope was null or undefined when calling getResults.');
        }

        // verify required parameter 'entityCode' is not null or undefined
        if (entityCode === null || entityCode === undefined) {
            throw new Error('Required parameter entityCode was null or undefined when calling getResults.');
        }

        // verify required parameter 'calculationScope' is not null or undefined
        if (calculationScope === null || calculationScope === undefined) {
            throw new Error('Required parameter calculationScope was null or undefined when calling getResults.');
        }

        // verify required parameter 'calculationCode' is not null or undefined
        if (calculationCode === null || calculationCode === undefined) {
            throw new Error('Required parameter calculationCode was null or undefined when calling getResults.');
        }

        // verify required parameter 'effectiveAt' is not null or undefined
        if (effectiveAt === null || effectiveAt === undefined) {
            throw new Error('Required parameter effectiveAt was null or undefined when calling getResults.');
        }

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };

        this.authentications.oauth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Results;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Results");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
    /**
     * Upsert pre-calculated results against a specified combination of key parameters defined in the CreateResults request.
     * @summary [EXPERIMENTAL] Upsert results
     * @param request The details of what to upsert
     */
    public async upsertResults (request?: CreateResults, options: {headers: {[name: string]: string}} = {headers: {}}) : Promise<{ response: http.IncomingMessage; body: Results;  }> {
        const localVarPath = this.basePath + '/api/results';
        let localVarQueryParameters: any = {};
        let localVarHeaderParams: any = (<any>Object).assign({}, this.defaultHeaders);
        let localVarFormParams: any = {};

        (<any>Object).assign(localVarHeaderParams, options.headers);

        let localVarUseFormData = false;

        let localVarRequestOptions: localVarRequest.Options = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: ObjectSerializer.serialize(request, "CreateResults")
        };

        this.authentications.oauth2.applyToRequest(localVarRequestOptions);

        this.authentications.default.applyToRequest(localVarRequestOptions);

        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                (<any>localVarRequestOptions).formData = localVarFormParams;
            } else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise<{ response: http.IncomingMessage; body: Results;  }>((resolve, reject) => {
            localVarRequest(localVarRequestOptions, (error, response, body) => {
                if (error) {
                    reject(error);
                } else {
                    body = ObjectSerializer.deserialize(body, "Results");
                    if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    } else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    }
}
