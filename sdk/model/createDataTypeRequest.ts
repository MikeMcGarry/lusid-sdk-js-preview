/**
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1380
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { CreateUnitDefinition } from './createUnitDefinition';

export class CreateDataTypeRequest {
    'scope': string;
    'code': string;
    'typeValueRange': CreateDataTypeRequest.TypeValueRangeEnum;
    'displayName': string;
    'description': string;
    'valueType': CreateDataTypeRequest.ValueTypeEnum;
    'acceptableValues'?: Array<string>;
    'unitSchema'?: CreateDataTypeRequest.UnitSchemaEnum;
    'acceptableUnits'?: Array<CreateUnitDefinition>;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "scope",
            "baseName": "scope",
            "type": "string"
        },
        {
            "name": "code",
            "baseName": "code",
            "type": "string"
        },
        {
            "name": "typeValueRange",
            "baseName": "typeValueRange",
            "type": "CreateDataTypeRequest.TypeValueRangeEnum"
        },
        {
            "name": "displayName",
            "baseName": "displayName",
            "type": "string"
        },
        {
            "name": "description",
            "baseName": "description",
            "type": "string"
        },
        {
            "name": "valueType",
            "baseName": "valueType",
            "type": "CreateDataTypeRequest.ValueTypeEnum"
        },
        {
            "name": "acceptableValues",
            "baseName": "acceptableValues",
            "type": "Array<string>"
        },
        {
            "name": "unitSchema",
            "baseName": "unitSchema",
            "type": "CreateDataTypeRequest.UnitSchemaEnum"
        },
        {
            "name": "acceptableUnits",
            "baseName": "acceptableUnits",
            "type": "Array<CreateUnitDefinition>"
        }    ];

    static getAttributeTypeMap() {
        return CreateDataTypeRequest.attributeTypeMap;
    }
}

export namespace CreateDataTypeRequest {
    export enum TypeValueRangeEnum {
        Open = <any> 'Open',
        Closed = <any> 'Closed'
    }
    export enum ValueTypeEnum {
        String = <any> 'String',
        Int = <any> 'Int',
        Decimal = <any> 'Decimal',
        DateTime = <any> 'DateTime',
        Boolean = <any> 'Boolean',
        Map = <any> 'Map',
        List = <any> 'List',
        PropertyArray = <any> 'PropertyArray',
        Percentage = <any> 'Percentage',
        BenchmarkType = <any> 'BenchmarkType',
        Code = <any> 'Code',
        Id = <any> 'Id',
        Uri = <any> 'Uri',
        ArrayOfIds = <any> 'ArrayOfIds',
        ArrayOfTransactionAliases = <any> 'ArrayOfTransactionAliases',
        ArrayofTransactionMovements = <any> 'ArrayofTransactionMovements',
        ArrayofUnits = <any> 'ArrayofUnits',
        StringArray = <any> 'StringArray',
        CurrencyAndAmount = <any> 'CurrencyAndAmount',
        TradePrice = <any> 'TradePrice',
        UnitCreation = <any> 'UnitCreation',
        Currency = <any> 'Currency',
        UserId = <any> 'UserId',
        MetricValue = <any> 'MetricValue',
        QuoteId = <any> 'QuoteId',
        QuoteSeriesId = <any> 'QuoteSeriesId',
        ResourceId = <any> 'ResourceId',
        ResultValue = <any> 'ResultValue',
        CutLocalTime = <any> 'CutLocalTime',
        DateOrCutLabel = <any> 'DateOrCutLabel',
        Transition = <any> 'Transition',
        StructuredData = <any> 'StructuredData',
        StructuredDataId = <any> 'StructuredDataId',
        ConfigurationRecipe = <any> 'ConfigurationRecipe',
        ConfigurationRecipeSnippet = <any> 'ConfigurationRecipeSnippet',
        StructuredResultDataId = <any> 'StructuredResultDataId',
        StructuredResultData = <any> 'StructuredResultData',
        DataMapping = <any> 'DataMapping',
        LusidInstrument = <any> 'LusidInstrument',
        WeightedInstrument = <any> 'WeightedInstrument',
        Tenor = <any> 'Tenor',
        CdsDetailSpecifications = <any> 'CdsDetailSpecifications',
        FlowConventions = <any> 'FlowConventions',
        OrderId = <any> 'OrderId'
    }
    export enum UnitSchemaEnum {
        NoUnits = <any> 'NoUnits',
        Basic = <any> 'Basic',
        Iso4217Currency = <any> 'Iso4217Currency'
    }
}
