/**
 * LUSID API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.10.1386
 * Contact: info@finbourne.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { InstrumentLeg } from './instrumentLeg';
import { LusidInstrument } from './lusidInstrument';
import { SwapInstrumentAllOf } from './swapInstrumentAllOf';

/**
* IL Swap Instrument; Lusid-ibor internal representation of a swap instrument                A swap is the exchange of two sets of cashflows, occurring at one or more dates in one or more currencies.  These may include a notional exchange at the start and, or, maturity of the trade. Depending upon the choice of  payment currency, payment frequency and so on they can be used to match sets of future obligations
*/
export class SwapInstrument extends LusidInstrument {
    /**
    * Starting date of the swap
    */
    'startDate': Date;
    /**
    * Maturity date of the swap
    */
    'maturityDate': Date;
    /**
    * True if the swap is amortizing
    */
    'legs': Array<InstrumentLeg>;
    /**
    * The notional.
    */
    'notional': number;
    /**
    * True if the swap is amortizing
    */
    'isAmortizing': boolean;
    /**
    * True notional exchange type.
    */
    'notionalExchangeType': SwapInstrument.NotionalExchangeTypeEnum;
    /**
    * Instrument type, must be property for JSON.
    */
    'instrumentType': SwapInstrument.InstrumentTypeEnum;

    static discriminator: string | undefined = undefined;

    static attributeTypeMap: Array<{name: string, baseName: string, type: string}> = [
        {
            "name": "startDate",
            "baseName": "startDate",
            "type": "Date"
        },
        {
            "name": "maturityDate",
            "baseName": "maturityDate",
            "type": "Date"
        },
        {
            "name": "legs",
            "baseName": "legs",
            "type": "Array<InstrumentLeg>"
        },
        {
            "name": "notional",
            "baseName": "notional",
            "type": "number"
        },
        {
            "name": "isAmortizing",
            "baseName": "isAmortizing",
            "type": "boolean"
        },
        {
            "name": "notionalExchangeType",
            "baseName": "notionalExchangeType",
            "type": "SwapInstrument.NotionalExchangeTypeEnum"
        },
        {
            "name": "instrumentType",
            "baseName": "instrumentType",
            "type": "SwapInstrument.InstrumentTypeEnum"
        }    ];

    static getAttributeTypeMap() {
        return super.getAttributeTypeMap().concat(SwapInstrument.attributeTypeMap);
    }
}

export namespace SwapInstrument {
    export enum NotionalExchangeTypeEnum {
        None = <any> 'None',
        Initial = <any> 'Initial',
        Final = <any> 'Final',
        Both = <any> 'Both'
    }
    export enum InstrumentTypeEnum {
        QuotedSecurity = <any> 'QuotedSecurity',
        InterestRateSwap = <any> 'InterestRateSwap',
        FxForward = <any> 'FxForward',
        Exotic = <any> 'Exotic',
        FxOption = <any> 'FxOption',
        CreditDefaultSwap = <any> 'CreditDefaultSwap',
        InterestRateSwaption = <any> 'InterestRateSwaption',
        Bond = <any> 'Bond',
        EquityOption = <any> 'EquityOption',
        Unknown = <any> 'Unknown'
    }
}
